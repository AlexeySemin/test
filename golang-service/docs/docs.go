// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2019-09-30 12:19:23.365934 +0400 +04 m=+0.047992543

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {
            "name": "MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/dbsa/news/min-max-avg-rating": {
            "get": {
                "description": "get min, max, avg news rating",
                "produces": [
                    "application/json"
                ],
                "summary": "DB side aggregation of the min, max, avg news rating",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.MinMaxAvgRating"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/api/dbsa/news/per-month-json-data": {
            "get": {
                "description": "get min, max, avg, count news per month",
                "produces": [
                    "application/json"
                ],
                "summary": "DB side aggregation of the min, max, avg, count news per month",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.PerMonthJSONData"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/api/news": {
            "post": {
                "description": "create news",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Create news",
                "parameters": [
                    {
                        "description": "Count of news",
                        "name": "Count",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/request.CreateNews"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/response.LogOnly"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete news",
                "produces": [
                    "application/json"
                ],
                "summary": "Delete news",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.LogOnly"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/api/ssa/news/min-max-avg-rating": {
            "get": {
                "description": "Server side aggregation of the min, max, avg news rating",
                "produces": [
                    "application/json"
                ],
                "summary": "Server side aggregation of the min, max, avg news rating",
                "parameters": [
                    {
                        "enum": [
                            "true",
                            "false"
                        ],
                        "type": "string",
                        "description": "If use_rows=false or doesn't exist server will work with News entities, otherwise will work with DB rows",
                        "name": "use_rows",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.MinMaxAvgRating"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/api/ssa/news/per-month-json-data": {
            "get": {
                "description": "get min, max, avg, count news per month",
                "produces": [
                    "application/json"
                ],
                "summary": "Server side aggregation of the min, max, avg, count news per month",
                "parameters": [
                    {
                        "enum": [
                            "true",
                            "false"
                        ],
                        "type": "string",
                        "description": "If use_rows=false or doesn't exist server will work with News entities, otherwise will work with DB rows",
                        "name": "use_rows",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.PerMonthJSONData"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "request.CreateNews": {
            "type": "object",
            "required": [
                "count"
            ],
            "properties": {
                "count": {
                    "type": "integer",
                    "maximum": 500000
                }
            }
        },
        "response.Log": {
            "type": "object",
            "properties": {
                "duration": {
                    "type": "number"
                }
            }
        },
        "response.LogOnly": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "object",
                    "$ref": "#/definitions/response.Log"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "response.MinMaxAvgRating": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "object",
                    "properties": {
                        "avg": {
                            "type": "number"
                        },
                        "duration": {
                            "type": "number"
                        },
                        "max": {
                            "type": "integer"
                        },
                        "min": {
                            "type": "integer"
                        }
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "response.PerMonthJSONData": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "object",
                    "properties": {
                        "data": {
                            "type": "string"
                        },
                        "duration": {
                            "type": "number"
                        }
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "response.Response": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "object"
                },
                "message": {
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "0.0.1",
	Host:        "localhost:8081",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "Swagger API doc",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
